// (c) Copyright 2012 Adobe Systems, Inc. All rights reserved.// Written by David Deraedtfunction log(pText){	//$.writeln(pText);}function processTemplate(template, rep) {		var txt = template;		for( var z in rep) {				var reg = new RegExp("@{"+z+"}", "g");		txt = txt.replace (reg, rep[z]);	}		return txt;}function normalizeName(name){	return name.replace(" ", "_");}/*	FILE UTILS*/function getFileString(path){		var txt ="" ;	var file = new File(path);	if(!file.exists){		alert("no such file");	}	else{		file.open("r");			txt = file.read();				file.close();		return txt;		}}function getFileNamePart(filename){	var index = filename.lastIndexOf (".");	return filename.substring (0, index);	}function getFileNameExtPart(filename){	var index = filename.lastIndexOf (".");	return filename.substring (index+1);}// hack to get the script parentfunction getParentDir() {   var where;   try {      var FORCEERROR = FORCERRROR;   }   catch( err ) {      where = File(err.fileName);   }   return where.parent;}function saveTextFile(pText, filepath) {		    // get OS specific linefeed    var fileLineFeed;     if ($.os.search(/windows/i) != -1) {            fileLineFeed = "Windows";    } else {		fileLineFeed = "Unix";	}		    fileOut = new File(filepath);    fileOut.lineFeed = fileLineFeed;    fileOut.open("w", "TEXT", "????");    fileOut.write(pText);    fileOut.close();}var LayerExporter = (function () {	/**	Exports all layers of a given document to properly sized PNG or SVG files	Warning: this script will modify the original file!	@public	@param {Document} doc The document to export	@param {Folder} destFolder The destination folder for the image files	@param {String} exportType Determines if layers should be converted to SVG or PNG files	(This value should use ExportType constants)	@param {Rect} customBounds A rectangle which determines the output file size.	If null, the layer visible bounds are used.	*/	function exportLayers(doc, destFolder, exportType, customBounds){						setLayersVisibility(doc, false);					var destPath = destFolder.path +"/"+ destFolder.name+"/";								var artboard = doc.artboards[0];		var originRect = artboard.artboardRect;		var docName = normalizeName(getFileNamePart(doc.name));		var n = doc.layers.length;		for ( var j = 0 ; j < n ; j++){						var l = doc.layers[j];									l.visible = true;			l.locked = false;			//ignore empty layers			if(l.pageItems.length==0) continue;						// also ignore items which width==0 (points etc)			if(doc.visibleBounds[0] == doc.visibleBounds[2]) continue;						if(customBounds) artboard.artboardRect = customBounds;			else artboard.artboardRect = doc.visibleBounds;						var fileName = docName + "-" + normalizeName(l.name);						exportImage(doc, destPath + fileName, exportType);											l.visible = false;		}		artboard.artboardRect = originRect;		setLayersVisibility(doc, true);			}	function exportImage(doc, dest, exportType) {				var options;				if(exportType == ExportType.SVG) {			options = new ExportOptionsSVG();			options.embedRasterImages = true;			}		else if (exportType == ExportType.PNG24){			options = new ExportOptionsPNG24();					}			var fileSpec = new File(dest);							   		doc.exportFile( fileSpec, exportType, options );			}	function setLayersVisibility(doc, visible) {				var n = doc.layers.length;		for ( var i = 0 ; i < n ; i++){			var l = doc.layers[i];			l.visible = visible;		}	}	var obj = {};	obj.exportLayers = exportLayers;	return obj;}());var EdgeAnimateExporter = (function () {	/**	Exports the given document to a given EdgeAnimate project	Each layer is converted to a SVG or PNG file which will be placed	in the project's "images" folder.	The project's xxx_edge.js dom array will also be modified to properly place	each image onto the project's stage.	Warning: this script will modify the original ai and an files	@public	@param {Document} doc The document to export	@param {File} anFile The destination Edge Animate project file	@param {String} exportType Determines if layers should be converted to SVG or PNG files	(This value should use ExportType constants)	*/	function exportToAnimate(doc, anFile, exportType){				var destFolder = anFile.parent;				var anName = getFileNamePart(anFile.name);		var imgFolder = new Folder(destFolder.path +"/"+ destFolder.name + "/images/");		if(!imgFolder.exists) imgFolder.create();		var dest = imgFolder.absoluteURI+"/";		var outputTxt = "";				var docName = normalizeName(getFileNamePart(doc.name));		var n = doc.layers.length;				for ( var j = n-1 ; j >= 0 ; j--){						var l = doc.layers[j];						l.locked = false;						// should be optional			if(l.visible == false) continue;			if(l.pageItems.length==0) continue;									var fileName = docName + "-" + normalizeName(l.name);									outputTxt += outputLayerData(doc, l, fileName, exportType);					}						LayerExporter.exportLayers(doc, imgFolder, exportType);				// edge animate code generation		//log("OUTPUT: " + outputTxt);		var edgeFile = new File(destFolder.absoluteURI+"/" + anName + "_edge.js");		var edgeFileString = getFileString(edgeFile.absoluteURI);			var newFileString = edgeFileString.replace("dom: [", "dom: [" + outputTxt);		saveTextFile(newFileString, edgeFile);			}	function outputLayerData(doc, layer, name, exportType){								var txt = "";				var ext = "svg";				if (exportType==ExportType.PNG24) ext = "png";				var item;		// In order to group items, we need to select them		layer.hasSelectedArtwork = true;		// Need to group since there is no way to get the position of an item collection		if(doc.selection.length>1) {			item = groupSelection(layer);			// TODO ungroup		} else {			item = doc.selection[0];				}				// unselect		doc.selection = null;				var pos = getItemCoords(item);		//log('\nx: '+pos.x + ' , y: ' + pos.y);		txt += "\t\t{\n\t\t\tid:'" + name + "',\n";		txt += "\t\t\ttype:'image',\n";		txt += "\t\t\trect:[" + "'" + pos.x + "', '" + pos.y + "', '" + item.width.toFixed(2) + "px', '" + item.height.toFixed(2) + "px', " + "'auto','auto'],\n";		txt += "\t\t\tfill:[\"rgba(0,0,0,0)\",im+\"" + name + "." + ext +"\",'0px','0px'" + "]\n";		txt += "\t\t},\n";		return txt;	}	function normalizeName(name){		return name.replace(" ", "_");	}	function groupSelection(layer){		var sel = app.activeDocument.selection;		var newGroup = layer.groupItems.add();			log(layer.name + ':' + sel.length);		for ( i = 0; i < sel.length; i++ ) {			var newItem = sel[i];			newItem.moveToEnd( newGroup );		}		return newGroup;	}	function getItemCoords(item, usesDocCoords){				var pos = item.position;    				if(app.coordinateSystem == CoordinateSystem.DOCUMENTCOORDINATESYSTEM){			pos = app.activeDocument.convertCoordinate (item.position, CoordinateSystem.DOCUMENTCOORDINATESYSTEM, CoordinateSystem.ARTBOARDCOORDINATESYSTEM);		}				return {x: (pos[0]).toFixed(2), y: (pos[1]).toFixed(2)*-1};	}	var obj = {};	obj.exportDoc = exportToAnimate;	return obj;	}());#target illustratorfunction main() {	if ( app.documents.length > 0 ) {				var doc = app.activeDocument;		var docFile = doc.fullName;		if(!doc.saved){			Window.alert("This script needs to modify your document. Please save it before running this script.");			return;		}		var anFile = File.openDialog ("Select the .an file of the destination Edge Animate project.");			if(!anFile) return;						// ExportType.PNG24 or ExportType.SVG		EdgeAnimateExporter.exportDoc(doc, anFile, ExportType.SVG);				// Close and reopen original		// (necessary since the script needs to modify the original file)			doc.close(SaveOptions.DONOTSAVECHANGES);		doc = null;		app.open(docFile);	}}main();