// (c) Copyright 2013 Adobe Systems, Inc. All rights reserved.// author David Deraedt#include "../common/Utils.jsx"#include "LayerExporter.jsx"var EdgeAnimateExporter = (function () {	/**	Exports the given document to a given EdgeAnimate project	Each layer is converted to a SVG or PNG file which will be placed	in the project's "images" folder.	The project's xxx_edge.js dom array will also be modified to properly place	each image onto the project's stage.	Warning: this script will modify the original ai and an files	@public	@param {Document} doc The document to export	@param {File} anFile The destination Edge Animate project file	@param {String} exportType Determines if layers should be converted to SVG or PNG files	(This value should use ExportType constants)	*/	function exportToAnimate(doc, anFile, exportType){				var destFolder = anFile.parent;				var anName = getFileNamePart(anFile.name);		var imgFolder = new Folder(destFolder.path +"/"+ destFolder.name + "/images/");		if(!imgFolder.exists) imgFolder.create();		var dest = imgFolder.absoluteURI+"/";		var outputTxt = "";				var docName = normalizeName(getFileNamePart(doc.name));		var n = doc.layers.length;				for ( var j = n-1 ; j >= 0 ; j--){						var l = doc.layers[j];						l.locked = false;						// should be optional			if(l.visible == false) continue;			if(l.pageItems.length==0) continue;									var fileName = docName + "-" + normalizeName(l.name);									outputTxt += outputLayerData(doc, l, fileName, exportType);					}						LayerExporter.exportLayers(doc, imgFolder, exportType);				// edge animate code generation		//log("OUTPUT: " + outputTxt);		var edgeFile = new File(destFolder.absoluteURI+"/" + anName + "_edge.js");		var edgeFileString = getFileString(edgeFile.absoluteURI);			var newFileString = edgeFileString.replace("dom: [", "dom: [" + outputTxt);		saveTextFile(newFileString, edgeFile);			}	function outputLayerData(doc, layer, name, exportType){								var txt = "";				var ext = "svg";				if (exportType==ExportType.PNG24) ext = "png";				var item;		// In order to group items, we need to select them		layer.hasSelectedArtwork = true;		// Need to group since there is no way to get the position of an item collection		if(doc.selection.length>1) {			item = groupSelection(layer);			// TODO ungroup		} else {			item = doc.selection[0];				}				// unselect		doc.selection = null;				var pos = getItemCoords(item);		//log('\nx: '+pos.x + ' , y: ' + pos.y);		txt += "\t\t{\n\t\t\tid:'" + name + "',\n";		txt += "\t\t\ttype:'image',\n";		txt += "\t\t\trect:[" + "'" + pos.x + "', '" + pos.y + "', '" + item.width.toFixed(2) + "px', '" + item.height.toFixed(2) + "px', " + "'auto','auto'],\n";		txt += "\t\t\tfill:[\"rgba(0,0,0,0)\",im+\"" + name + "." + ext +"\",'0px','0px'" + "]\n";		txt += "\t\t},\n";		return txt;	}	function normalizeName(name){		return name.replace(" ", "_");	}	function groupSelection(layer){		var sel = app.activeDocument.selection;		var newGroup = layer.groupItems.add();			//log(layer.name + ':' + sel.length);		for ( i = 0; i < sel.length; i++ ) {			var newItem = sel[i];			newItem.moveToEnd( newGroup );		}		return newGroup;	}	function getItemCoords(item, usesDocCoords){				var pos = item.position;    				if(app.coordinateSystem == CoordinateSystem.DOCUMENTCOORDINATESYSTEM){			pos = app.activeDocument.convertCoordinate (item.position, CoordinateSystem.DOCUMENTCOORDINATESYSTEM, CoordinateSystem.ARTBOARDCOORDINATESYSTEM);		}				return {x: (pos[0]).toFixed(2), y: (pos[1]).toFixed(2)*-1};	}	var obj = {};	obj.exportDoc = exportToAnimate;	return obj;	}());